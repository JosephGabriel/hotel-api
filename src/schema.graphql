type Query {
  user(id: ID!): User!
  users: [User!]!

  hotel(id: ID!): Hotel
  hotels: [Hotel!]!
}

type Mutation {
  loginUser(data: LoginUserInput!): AuthPayload!
  createUser(data: CreateUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): AuthPayload!
  updatedUserPassword(data: UpdateUserPasswordInput!): AuthPayload!
  deleteUser: User!

  createHotel(data: CreateHotelInput!): Hotel!
}

type User {
  id: ID!
  name: String!
  lastname: String!
  password: String!
  passwordChangedAt: String
  username: String!
  email: String!
  createdAt: String
  updatedAt: String
  verified: Boolean!
  active: Boolean!
  role: UserRole!
  reviews: [Review!]!
}

type Hotel {
  id: ID!
  name: String!
  rating: Int
  summary: String!
  description: String!
  imageCover: String!
  logo: String!
  slug: String!
  latitude: String
  longitude: String
  address: String
  zipCode: String
  rooms: [Room!]!
}

type Room {
  id: ID!
  name: String!
  description: String!
  summary: String!
  imageCover: String!
  imageHero: String!
  photos: [String!]!
  commodities: [String!]!
  mainCommodities: [String!]!
  forFamilycommodities: [String!]!
  activityCommodities: [String!]!
  price: Float!
  rating: Int
  hotel: Hotel!
  reviews: [Review!]!
}

type Review {
  id: ID!
  user: User!
  room: Room!
  review: String!
  rating: Int!
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  email: String!
  lastname: String!
  username: String!
  password: String!
  passwordConfirm: String!
}

input UpdateUserInput {
  name: String
  email: String
  lastname: String
  username: String
}

input UpdateUserPasswordInput {
  password: String!
  passwordConfirm: String!
}

input CreateHotelInput {
  name: String!
  summary: String!
  description: String!
  imageCover: String!
  logo: String!
  latitude: String
  longitude: String
  address: String
  zipCode: String
}

enum UserRole {
  USER
  ADMIN
}
